#include "util.pwgsl"

override CONSTV_0 : u32 = 1u;
override CONSTV_1 : u32 = 1u;

#define op_softmax_workgroup_count             CONSTV_0
#define op_softmax_input1_offset               CONSTV_1

var<workgroup> sharedSums: array<DTYPE, 64>; 

var<workgroup> sharedM: f32; 

#ifdef f32

override USE_Z : bool = false;

#define op_softmax_length                       op_meta[0]
#define op_softmax_dest_size                    op_meta[1]

@compute
@workgroup_size(64,1,1)
fn softmax(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let tid = global_id.x;
    let output_index = global_id.y + select(USE_Z, global_id.z * 65535, 0u);
    
    //Start Index of the Elements to Reduce
    let start_index = output_index * op_softmax_length;
    let start_index1 = start_index + op_softmax_input1_offset;

    //We split the Reduction into 64 threads -> find the sub region we need to reduce over 
    if(output_index < op_softmax_dest_size || !USE_Z)
    {
        //Now Reduce from start to end
        var maxVal = MINVALUE;
        for (var i = tid; i < op_softmax_length; i += 64u) {
            maxVal = max(maxVal, v_input1[start_index1 + i]);
        }

        sharedSums[tid] = maxVal; 
    }
    workgroupBarrier();

    //calculate max
    if (tid == 0 && (output_index < op_softmax_dest_size || !USE_Z)){
        let cnt = op_softmax_workgroup_count;
        //Finnaly Sum of all worker threads:
        var sum = MINVALUE;
        for (var i = 0u; i < cnt; i++){
            sum = max(sum,sharedSums[i]) ;
        }
        sharedSums[0] = sum;
    }

    workgroupBarrier();

    let maxElement = sharedSums[0];

    if (output_index < op_softmax_dest_size || !USE_Z) {
        var sum = ZERO;
        
        for (var i = tid; i < op_softmax_length; i += 64u) {
            let val = exp(v_input1[start_index1 + i] - maxElement);
            v_dest[start_index + i] = val;
            sum += val;
        }

        sharedSums[tid] = sum;
    }
   
    workgroupBarrier();

    //This is not optimal (only 1 of 64 threads sums the partial result of each thread)
    //TODO: Either use multiple threads for the sum(e.g. first 32 threads, then 16, then 8, ...)
    //      or let one thread calculate multiple outputs in sharedSums, and then let multiple threads sum the partial results of one output(like in matmul1x64b) 
    if (tid == 0 && (output_index < op_softmax_dest_size || !USE_Z)){
        let cnt = op_softmax_workgroup_count;
        var sum = ZERO;
        for (var i = 0u; i < cnt; i++){
            sum += sharedSums[i];
        }

        sharedSums[0] = sum;
    }

    workgroupBarrier();

    let totalSum = sharedSums[0];
    if (output_index < op_softmax_dest_size || !USE_Z) {
        for (var i = tid; i < op_softmax_length; i += 64u) {
            v_dest[start_index + i] /= totalSum;
        }
    }
}

#endif