#include "util.pwgsl"

override CONSTV_0 : u32 = 1u;
override CONSTV_1 : u32 = 1u;

#define op_softmax_workgroup_count             CONSTV_0
#define op_softmax_input1_offset               CONSTV_1

var<workgroup> sharedSums: array<DTYPE, 64>; 

#ifdef f32

override USE_Z : bool = false;

#define op_softmax_length                       op_meta[0]
#define op_softmax_dest_size                    op_meta[1]

@compute
@workgroup_size(64,1,1)
fn softmax(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let tid = global_id.x;
    let output_index = global_id.y + select(USE_Z, global_id.z * 65535, 0u);
    
    //Start Index of the Elements to Reduce
    let start_index = output_index * op_softmax_length;
    let start_index1 = start_index + op_softmax_input1_offset;

    //We split the Reduction into 64 threads -> find the sub region we need to reduce over 
    if(output_index < op_softmax_dest_size || !USE_Z)
    {
        //Now Reduce from start to end
        var sum = ZERO;
        for (var i = tid; i < op_softmax_length; i += 64u) {
            let value = v_input1[start_index1 + i];
            let val = exp(value);
            sum += val;
        }
        sharedSums[tid] = sum;
    }
    workgroupBarrier();

    if (tid < 32u) {
        sharedSums[tid] += sharedSums[tid + 32u];   
    }
    workgroupBarrier();
    if (tid == 0){
        var sum = ZERO;
        for (var i = 0u; i < 32u; i++){
            sum += sharedSums[i];
        }
        sharedSums[0] = sum;
    }
    workgroupBarrier();

    let sumElement = sharedSums[0];

    if (output_index < op_softmax_dest_size || !USE_Z) {
        for (var i = tid; i < op_softmax_length; i += 64u) {
            v_dest[start_index + i] = exp(v_input1[start_index1 + i]) / sumElement;
        }
    }
}
#endif