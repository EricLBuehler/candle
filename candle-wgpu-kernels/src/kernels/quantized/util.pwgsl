/// f16 <-> f32
/// https://stackoverflow.com/questions/1659440/32-bit-to-16-bit-floating-point-conversion
fn as_uint(x: f32) -> u32 {
    return bitcast<u32>(x);
}

fn as_float(x: u32) -> f32 {
    return bitcast<f32>(x);
}

fn half_to_float(x: u32) -> f32 {

    let e: u32 = (x & 0x7C00u) >> 10u; // Extract exponent
    let m: u32 = (x & 0x03FFu) << 13u; // Extract and shift mantissa
    let v: u32 = as_uint(f32(m)) >> 23u; // Approximate log2 for denormals

    let sign: u32 = (x & 0x8000u) << 16u;
    let normalized: u32 = select(0u, ((e + 112u) << 23u) | m, e != 0u);
    let denormalized: u32 = select(0u, ((v - 37u) << 23u) | ((m << (150u - v)) & 0x007FE000u), e == 0u && m != 0u);

    return as_float(sign | normalized | denormalized);
}

fn float_to_half(x: f32) -> u32 {
    let b: u32 = as_uint(x) + 0x00001000u; // Round to nearest-even
    let e: u32 = (b & 0x7F800000u) >> 23u; // Extract exponent
    let m: u32 = b & 0x007FFFFFu; // Extract mantissa

    let sign: u32 = (b & 0x80000000u) >> 16u;
    let normalized: u32 = select(0u, (((e - 112u) << 10u) & 0x7C00u) | (m >> 13u), e > 112u);
    let denormalized: u32 = select(0u, (((0x007FF000u + m) >> (125u - e)) + 1u) >> 1u, e < 113u && e > 101u);
    let saturated: u32 = select(0x7FFFu, 0u, e <= 143u);

    return u32(sign | normalized | denormalized | saturated);
}
