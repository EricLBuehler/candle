fn FUNC_NAME(idx : u32) -> f32{
    let block_index = idx / BLOCK_SIZE;
    let block_starting_byte = block_index * BLOCK_BYTE_SIZE;
    let block_qs_byte = block_starting_byte + QS_OFFSET;

    let index_inside_block = idx % BLOCK_SIZE;

    let d = half_to_float(load_data(data,block_starting_byte + D_OFFSET,0u,0xFFFF));

    //#definec BIT_SIZE_OFFSET (((32/BIT_SIZE)-1)*BIT_SIZE)
    #if BIT_SIZE == 4 
        let byte_index_inside_block = block_qs_byte + index_inside_block % 16;
        let byte_offset = (index_inside_block / 16) * 4;
        #ifdef M_OFFSET 
            let qs = load_data(data,byte_index_inside_block,byte_offset,0xF);
        #else
            let qs = i32(load_data(data,byte_index_inside_block,byte_offset,0xF)) - 8;
        #endif
    #elif BIT_SIZE == 5
        let byte_index_inside_block = block_qs_byte + index_inside_block % 16;
        let byte_offset = (index_inside_block / 16) * 4;
        let byte_offset2 = (index_inside_block / 16) * 2;


        let qh_byte_index =  block_starting_byte + QH_OFFSET + 3 - (index_inside_block) / 8;
        let qh_bit_index = (index_inside_block) % 8;
        let xh = load_data(data,block_starting_byte, qh_bit_index,0x1) << 4;
        //let xh = 0u;
        #ifdef M_OFFSET 
            let qs = load_data(data,byte_index_inside_block,byte_offset,0xF) | xh;
        #else
            let qs = i32(load_data(data,byte_index_inside_block,byte_offset,0xF) | xh) - 16;
        #endif
    #elif BIT_SIZE == 8
        let byte_index_inside_block = block_qs_byte + index_inside_block; 
        let x_u4 = load_data(data,byte_index_inside_block,0u,0xFF);
        let qs = i32(x_u4 << (32-BIT_SIZE)) >> (32-BIT_SIZE);
    #endif

    #ifdef M_OFFSET
        let m =  half_to_float(load_data(data,block_starting_byte+M_OFFSET,0u,0xFFFF));
        return f32(qs) * d + m; 
        //return f32(qs) * d + m; 
    #else
        //return f32(qs); 
        return f32(qs) * d; 
    #endif
}


// fn dequantize_block_to_f32(block_index : u32){
//     let block_starting_byte = block_index * BLOCK_BYTE_SIZE;

//     let block_qs_byte = block_starting_byte + QS_OFFSET;

//     let d = half_to_float(load_data(data,block_starting_byte + D_OFFSET,0u,0xFFFF));
    
//     for(var index_inside_block = 0u; index_inside_block < BLOCK_SIZE; index_inside_block++){
//         #if BIT_SIZE == 4 
//             let byte_index_inside_block = block_qs_byte + index_inside_block % 16;

//             let x_u8 =  load_data(data,byte_index_inside_block,0u,0xFF);
//             let x0_b = x_u8 & 0x0F;
//             let x1_b = x_u8 >> 4;

//             let byte_offset = (index_inside_block / 16) * 4;
//             #ifdef M_OFFSET 
//                 let x0 = x0_b;
//                 let x1 = x1_b;
//                  let qs = load_data(data,byte_index_inside_block,byte_offset,0xF) | xh;
//             #else
//                 let x0 = i32(x0_b) - 8;
//                 let x1 = i32(x1_b) - 8;
//             #endif
//             CALLBACK
//         #elif BIT_SIZE == 5
//             //TODO
//             let byte_index_inside_block = block_qs_byte + index_inside_block % 16;
//             let byte_offset = (index_inside_block / 16) * 4;
//             let byte_offset2 = (index_inside_block / 16) * 2;


//             let qh_byte_index =  block_starting_byte + QH_OFFSET + 3 - (index_inside_block) / 8;
//             let qh_bit_index = (index_inside_block) % 8;
//             let xh = load_data(data,block_starting_byte, qh_bit_index,0x1) << 4;
//             //let xh = 0u;
//             #ifdef M_OFFSET 
//                 let qs = load_data(data,byte_index_inside_block,byte_offset,0xF) | xh;
//             #else
//                 let qs = i32(load_data(data,byte_index_inside_block,byte_offset,0xF) | xh) - 16;
//             #endif
//         #elif BIT_SIZE == 8
//             let byte_index_inside_block = block_qs_byte + index_inside_block; 
//             let x_u4 = load_data(data,byte_index_inside_block,0u,0xFF);
//             let qs = i32(x_u4 << (32-BIT_SIZE)) >> (32-BIT_SIZE);
//         #endif

//         #ifdef M_OFFSET
//             let m =  half_to_float(load_data(data,block_starting_byte+M_OFFSET,0u,0xFFFF));
//             let v = f32(qs) * d + m;
//             CALLBACK(index_inside_block,v)
//         #else
//             let v = f32(qs) * d; 
//         #endif
//     }
// }