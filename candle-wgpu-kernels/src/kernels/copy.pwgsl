#include "util.pwgsl"

override CONSTV_0 : bool = true;
override CONSTV_1 : bool = true;
override CONSTV_2 : bool = true;
override CONSTV_3 : bool = true;

#define op_copy_2d_is_input1_offset_zero   CONSTV_0
#define op_copy_2d_is_dest_offset_zero     CONSTV_1

#define op_copy_2d_d1                op_meta[0]
#define op_copy_2d_d2                op_meta[1]
#define op_copy_2d_input1_stride1    op_meta[2]
#define op_copy_2d_dest_stride1      op_meta[3]
#define op_copy_2d_dest_offset       op_meta[4]
#define op_copy_2d_input1_offset    select(op_copy_2d_is_input1_offset_zero, 0u, op_meta[5])



#define op_copy_strided_dest_offset op_meta[0]
#define op_copy_strided_input1_layout 1u

#define op_copy_copy_size op_meta[0]
#define op_copy_dest_offset op_meta[1]
#define op_copy_src_offset op_meta[2]

@compute
@workgroup_size(64,1,1)
fn copy_strided(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x + global_id.y * 65535 * 64;
    let pos1 = get_index1(op_copy_strided_input1_layout, id);
    if(pos1.is_valid){
        let x = v_input1[pos1.id];
        v_dest[op_copy_strided_dest_offset + id] = x;
    }
}


#define op_copy_is_src_offset_zero      CONSTV_0
#define op_copy_is_dest_offset_zero     CONSTV_1

#define op_copy_src_offset    op_meta[0]

@compute
@workgroup_size(64,1,1)
fn copy(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x + global_id.y * 65535 * 64;

    let dest_offset = select(op_copy_is_dest_offset_zero, 0u, op_copy_dest_offset);
    let src_offset = select(op_copy_is_src_offset_zero, 0u, op_copy_src_offset);

    if(id < op_copy_copy_size){
        v_dest[dest_offset + id] = v_input1[src_offset + id];
    }
}

@compute
@workgroup_size(64,1,1)
fn copy_4(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x + global_id.y * 65535 * 64;

    let dest_offset = select(op_copy_is_dest_offset_zero, 0u, op_copy_dest_offset);
    let src_offset = select(op_copy_is_src_offset_zero, 0u, op_copy_src_offset);

    if(id < op_copy_copy_size){
        v_dest_4[dest_offset + id] = v_input1_4[src_offset + id];
    }
}

@compute
@workgroup_size(16,16,1)
fn copy2d(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let i1 = global_id.x + global_id.z * 65535 * 16;
    let i2 = global_id.y;

    if (i1 >= op_copy_2d_d1){
        return;
    }
    if(i2 >= op_copy_2d_d2){
        return;
    }
    let dest_stride = op_copy_2d_dest_stride1;
    let input1_stride = op_copy_2d_input1_stride1;

    let dest_offset = select(op_copy_2d_is_dest_offset_zero, 0u, op_copy_2d_dest_offset);

    v_dest[dest_offset + dest_stride * i1 + i2] = v_input1[op_copy_2d_input1_offset + input1_stride * i1 + i2];
}

@compute
@workgroup_size(16,16,1)
fn copy2d2(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let i1 = global_id.x + global_id.z * 65535 * 16;
    let i2 = global_id.y * 8;

    if (i1 >= op_copy_2d_d1){
        return;
    }
    if(i2 >= op_copy_2d_d2){
        return;
    }



    let dest_stride = op_copy_2d_dest_stride1;
    let input1_stride = op_copy_2d_input1_stride1;

    let start_offset_input = op_copy_2d_input1_offset + input1_stride * i1 + i2;
    let dest_offset = select(op_copy_2d_is_dest_offset_zero, 0u, op_copy_2d_dest_offset);
    let start_offset_dest = dest_offset + dest_stride * i1 + i2;

    var count = min(8u, op_copy_2d_d2 - i2);
    switch(count){
        case 8u{
            for(var w = 0u; w < 8u; w++){
                v_dest[start_offset_dest + w] = v_input1[start_offset_input + w];
            }
        }
        default{
            for(var w = 0u; w < count; w++){
                v_dest[start_offset_dest + w] = v_input1[start_offset_input + w];
            }
        }
    }
}


@compute
@workgroup_size(16,16,1)
fn copy2d_transpose(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let i1 = global_id.y;
    let i2 = (global_id.x + global_id.z * 65535 * 16);

    if(i1 >= op_copy_2d_d1){
        return;
    }
    if(i2 >= op_copy_2d_d2){
        return;
    }

    
    let dest_stride = op_copy_2d_dest_stride1;
    let input1_stride = op_copy_2d_input1_stride1;
    let dest_offset = select(op_copy_2d_is_dest_offset_zero, 0u, op_copy_2d_dest_offset);
    v_dest[dest_offset + dest_stride * i1 + i2] = v_input1[op_copy_2d_input1_offset + input1_stride * i1 + i2];
}

@compute
@workgroup_size(16,16,1)
fn copy2d_transpose2(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let i1 = global_id.y;
    let i2 = (global_id.x + global_id.z * 65535 * 16) * 8;

    if (i1 >= op_copy_2d_d1){
        return;
    }
    if(i2 >= op_copy_2d_d2){
        return;
    }

    let dest_stride = op_copy_2d_dest_stride1;
    let input1_stride = op_copy_2d_input1_stride1;

    let start_offset_input = op_copy_2d_input1_offset + input1_stride * i1 + i2;
    let dest_offset = select(op_copy_2d_is_dest_offset_zero, 0u, op_copy_2d_dest_offset);
    let start_offset_dest = dest_offset + dest_stride * i1 + i2;

    var count = min(8u, op_copy_2d_d2 - i2);
    switch(count){
        case 8u{
            for(var w = 0u; w < 8u; w++){
                v_dest[start_offset_dest + w] = v_input1[start_offset_input + w];
            }
        }
        default{
            for(var w = 0u; w < count; w++){
                v_dest[start_offset_dest + w] = v_input1[start_offset_input + w];
            }
        }
    }
}



override CONSTV_4 : bool = true;
override CONSTV_5 : bool = true;
override CONSTV_6 : bool = true;



#define op_copy_3d_is_input1_offset_zero        CONSTV_0
#define op_copy_3d_is_dest_stride1              CONSTV_1
#define op_copy_3d_is_dest_stride2              CONSTV_2
#define op_copy_3d_is_dest_stride3              CONSTV_3
#define op_copy_3d_is_input_stride1            CONSTV_4
#define op_copy_3d_is_input_stride2            CONSTV_5
#define op_copy_3d_is_input_stride3            CONSTV_6

#define op_copy_3d_d1                op_meta[0]
#define op_copy_3d_d2                op_meta[1]

#define op_copy_3d_dest_stride1      op_meta[2]
#define op_copy_3d_dest_stride2      op_meta[3]
#define op_copy_3d_dest_stride3      op_meta[4]
#define op_copy_3d_input_stride1    op_meta[5]
#define op_copy_3d_input_stride2    op_meta[6]
#define op_copy_3d_input_stride3    op_meta[7]
#define op_copy_3d_size_d1          op_meta[8]
#define op_copy_3d_size_d2          op_meta[9]
#define op_copy_3d_input1_offset    select(op_copy_3d_is_input1_offset_zero, 0u, op_meta[10])

@compute
@workgroup_size(16,16,1)
fn copy3d(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let d1 = global_id.x; 
    let d2 = global_id.y;
    let d3 = global_id.z; //batch
    if(d1 >= op_copy_3d_d1){
        return;
    }
    if(d2 >= op_copy_3d_d2){
        return;
    }

    let dest_stride1 = select(op_copy_3d_is_dest_stride1, op_copy_3d_dest_stride1, 1u);
    let dest_stride2 = select(op_copy_3d_is_dest_stride2, op_copy_3d_dest_stride2, 1u);
    let dest_stride3 = select(op_copy_3d_is_dest_stride3, op_copy_3d_dest_stride3, 1u);

    let input_stride1 = select(op_copy_3d_is_input_stride1, op_copy_3d_input_stride1, 1u);
    let input_stride2 = select(op_copy_3d_is_input_stride2, op_copy_3d_input_stride2, 1u);
    let input_stride3 = select(op_copy_3d_is_input_stride3, op_copy_3d_input_stride3, 1u);


    v_dest[d1 * dest_stride1 + d2 * dest_stride2 + d3 * dest_stride3] = v_input1[op_copy_3d_input1_offset + d1 * input_stride1 + d2 * input_stride2 + d3 * input_stride3];
}

@compute
@workgroup_size(16,16,1)
fn copy3d_padded(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let d1 = global_id.x; 
    let d2 = global_id.y;
    let d3 = global_id.z; //batch

    let dest_stride1 = select(op_copy_3d_is_dest_stride1, op_copy_3d_dest_stride1, 1u);
    let dest_stride2 = select(op_copy_3d_is_dest_stride2, op_copy_3d_dest_stride2, 1u);
    let dest_stride3 = select(op_copy_3d_is_dest_stride3, op_copy_3d_dest_stride3, 1u);

    let input_stride1 = select(op_copy_3d_is_input_stride1, op_copy_3d_input_stride1, 1u);
    let input_stride2 = select(op_copy_3d_is_input_stride2, op_copy_3d_input_stride2, 1u);
    let input_stride3 = select(op_copy_3d_is_input_stride3, op_copy_3d_input_stride3, 1u);

    if(d1 >= op_copy_3d_size_d1){
        return;
    }
    if(d2 >= op_copy_3d_size_d2){
        return;
    }

    if(d1 >= op_copy_3d_d1 || d2 >= op_copy_3d_d2){
        v_dest[d1 * dest_stride1 + d2 * dest_stride2 + d3 * dest_stride3] = ZERO;
    }
    else{
        v_dest[d1 * dest_stride1 + d2 * dest_stride2 + d3 * dest_stride3] = v_input1[op_copy_3d_input1_offset + d1 * input_stride1 + d2 * input_stride2 + d3 * input_stride3];
    } 
}


const TILE_DIM: u32 = 32;
const BLOCK_ROWS: u32 = 8;
var<workgroup> tile: array<array<DTYPE, TILE_DIM>, TILE_DIM>;
#define op_transpose_width          op_meta[0]
#define op_transpose_height         op_meta[1]
#define op_transpose_input_offset   op_meta[2]
#define op_transpose_batch_stride   op_meta[3]


#define op_transpose_use_batch    CONSTV_0
#define op_transpose_input_offset_is_zero CONSTV_1

@compute
@workgroup_size(TILE_DIM, BLOCK_ROWS, 1)  // Matches the tile size and block row
fn transpose_batched(
    @builtin(global_invocation_id) global_id: vec3<u32>,
    @builtin(local_invocation_id) local_id: vec3<u32>,
    @builtin(workgroup_id) workgroup_id: vec3<u32>,
) {
    // Get the batch index from the z-dimension of the global ID
    let batch = select(op_transpose_use_batch,  global_id.z, 0u);
    let input_offset = select(op_transpose_input_offset_is_zero, 0u, op_transpose_input_offset);


    // Compute global indices for the input matrix within the batch
    let x = workgroup_id.x * TILE_DIM + local_id.x;
    let y = workgroup_id.y * TILE_DIM + local_id.y;
    let width = op_transpose_width; // Width of the matrix (in elements)
    let height = op_transpose_height;
    // Step 1: Load data from global memory into shared memory for transposition
    for (var j: u32 = 0; j < TILE_DIM; j += BLOCK_ROWS) {
        let global_y = y + j;
        if (global_y < height && x < width) {
            // Access the correct batch using the batch index
            tile[local_id.y + j][local_id.x] = v_input1[batch * op_transpose_batch_stride + global_y * width + x + input_offset];
        }
    }

    // Synchronize to ensure all threads have finished loading
    workgroupBarrier();

    // Step 2: Compute transposed global indices for output matrix within the batch
    let transposed_x = workgroup_id.y * TILE_DIM + local_id.x;
    let transposed_y = workgroup_id.x * TILE_DIM + local_id.y;

    // Step 3: Write the transposed data from shared memory back to global memory
    for (var j: u32 = 0; j < TILE_DIM; j += BLOCK_ROWS) {
        let global_transposed_y = transposed_y + j;
        if (global_transposed_y < width && transposed_x < height) {
            // Access the correct batch in the output matrix
            v_dest[batch * height * width + global_transposed_y * height + transposed_x] = tile[local_id.x][local_id.y + j];
        }
    }
}


@compute
@workgroup_size(16,16,1)
fn copy3d_padded_nobatch(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let d1 = global_id.x; 
    let d2 = global_id.y;

    let dest_stride1 = select(op_copy_3d_is_dest_stride1, op_copy_3d_dest_stride1, 1u);
    let dest_stride2 = select(op_copy_3d_is_dest_stride2, op_copy_3d_dest_stride2, 1u);
    let dest_stride3 = select(op_copy_3d_is_dest_stride3, op_copy_3d_dest_stride3, 1u); //is only used so that the shader compiles if op_copy_3d_is_dest_stride3 is set

    let input_stride1 = select(op_copy_3d_is_input_stride1, op_copy_3d_input_stride1, 1u);
    let input_stride2 = select(op_copy_3d_is_input_stride2, op_copy_3d_input_stride2, 1u);
    let input_stride3 = select(op_copy_3d_is_input_stride3, op_copy_3d_input_stride3, 1u);//is only used so that the shader compiles if op_copy_3d_is_dest_stride3 is set

    if(d1 >= op_copy_3d_size_d1){
        return;
    }
    if(d2 >= op_copy_3d_size_d2){
        return;
    }

    if(d1 >= op_copy_3d_d1 || d2 >= op_copy_3d_d2){
        v_dest[d1 * dest_stride1 + d2 * dest_stride2] = ZERO;
    }
    else{
        v_dest[d1 * dest_stride1 + d2 * dest_stride2] = v_input1[op_copy_3d_input1_offset + d1 * input_stride1 + d2 * input_stride2]; 
    } 
}

override CONSTV_7 : bool = true;
override CONSTV_8 : bool = true;
override CONSTV_9 : u32 = 1u;

#define op_copy_4d_is_input1_offset_zero             CONSTV_0
#define op_copy_4d_is_dest_stride1              CONSTV_1
#define op_copy_4d_is_dest_stride2              CONSTV_2
#define op_copy_4d_is_dest_stride3              CONSTV_3
#define op_copy_4d_is_dest_stride4              CONSTV_4
#define op_copy_4d_is_input_stride1            CONSTV_5
#define op_copy_4d_is_input_stride2            CONSTV_6
#define op_copy_4d_is_input_stride3            CONSTV_7
#define op_copy_4d_is_input_stride4            CONSTV_8

#define op_copy_4d_channels            CONSTV_9

#define op_copy_4d_d1_max                op_meta[0]
#define op_copy_4d_d2_max                op_meta[1]

#define op_copy_4d_d1_min                op_meta[2]
#define op_copy_4d_d2_min                op_meta[3]

#define op_copy_4d_dest_stride1      op_meta[4]
#define op_copy_4d_dest_stride2      op_meta[5]
#define op_copy_4d_dest_stride3      op_meta[6]
#define op_copy_4d_dest_stride4      op_meta[7]
#define op_copy_4d_input_stride1    op_meta[8]
#define op_copy_4d_input_stride2    op_meta[9]
#define op_copy_4d_input_stride3    op_meta[10]
#define op_copy_4d_input_stride4    op_meta[11]
#define op_copy_4d_size_d1          op_meta[12]
#define op_copy_4d_size_d2          op_meta[13]
#define op_copy_4d_input1_offset    select(op_copy_4d_is_input1_offset_zero, 0u, op_meta[14])


@compute
@workgroup_size(16,16,1)
fn copy4d_padded(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let d1 = global_id.x; 
    let d2 = global_id.y;
    let d3 = global_id.z % op_copy_4d_channels; //channels
    let d4 = global_id.z / op_copy_4d_channels; //batch

    let dest_stride1 = select(op_copy_4d_is_dest_stride1, op_copy_4d_dest_stride1, 1u);
    let dest_stride2 = select(op_copy_4d_is_dest_stride2, op_copy_4d_dest_stride2, 1u);
    let dest_stride3 = select(op_copy_4d_is_dest_stride3, op_copy_4d_dest_stride3, 1u);
    let dest_stride4 = select(op_copy_4d_is_dest_stride4, op_copy_4d_dest_stride4, 1u);

    let input_stride1 = select(op_copy_4d_is_input_stride1, op_copy_4d_input_stride1, 1u);
    let input_stride2 = select(op_copy_4d_is_input_stride2, op_copy_4d_input_stride2, 1u);
    let input_stride3 = select(op_copy_4d_is_input_stride3, op_copy_4d_input_stride3, 1u);
    let input_stride4 = select(op_copy_4d_is_input_stride4, op_copy_4d_input_stride4, 1u);

    if(d1 >= op_copy_4d_size_d1){
        return;
    }
    if(d2 >= op_copy_4d_size_d2){
        return;
    }

    if(d1 >= op_copy_4d_d1_max || d2 >= op_copy_4d_d2_max || d1 < op_copy_4d_d1_min || d2 < op_copy_4d_d2_min){
        v_dest[d1 * dest_stride1 + d2 * dest_stride2 + d3 * dest_stride3 + d4 * dest_stride4] = ZERO;
    }
    else{
        v_dest[d1 * dest_stride1 + d2 * dest_stride2 + d3 * dest_stride3 + d4 * dest_stride4] = v_input1[op_copy_4d_input1_offset + (d1 - op_copy_4d_d1_min) * input_stride1 + (d2 - op_copy_4d_d2_min) * input_stride2 + d3 * input_stride3 + d4 * input_stride4];
    } 
}
