#include "util.pwgsl"

#ifndef u32

@compute
@workgroup_size(64,1,1)
fn convert_to_u32(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x;
    let pos1 = get_index1(0u, id);
    if(pos1.is_valid){
        v_dest_u32[id] = u32(v_input1[pos1.id]);
    }
}

#endif

#ifndef f32

@compute
@workgroup_size(64,1,1)
fn convert_to_f32(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x;
    let pos1 = get_index1(0u, id);
    if(pos1.is_valid){
        v_dest_f32[id] = f32(v_input1[pos1.id]);
    }
}

#endif


#ifdef u8

@compute
@workgroup_size(64,1,1)
fn convert_u8_to_f32(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x;
    let pos1 = get_index1(0u, id);
    if(pos1.is_valid){
        let mem_id = pos1.id / 4;
        let u8_offset = pos1.id % 4;

        let value = (v_input1[mem_id] >> (8 * u8_offset)) & 0xFF;
        v_dest_f32[id] = f32(value);
    }
}

#endif


#define convert_start_offset                 op_meta[0]
#define convert_size                         op_meta[1]

#ifdef u32

@compute
@workgroup_size(64,1,1)
fn convert_u32_to_u8(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id_dest = global_id.x;
    let id_source = global_id.x * 4;
    if (id_source >= convert_size ){
        return;
    }

    // let x1 = select(0, v_input1[convert_start_offset + id_source + 0], id_source + 0 < convert_size);
    // let x2 = select(0, v_input1[convert_start_offset + id_source + 1], id_source + 1 < convert_size);
    // let x3 = select(0, v_input1[convert_start_offset + id_source + 2], id_source + 2 < convert_size);
    // let x4 = select(0, v_input1[convert_start_offset + id_source + 3], id_source + 3 < convert_size);

    var x1 : u32 = 0;
    var x2 : u32 = 0;
    var x3 : u32 = 0;
    var x4 : u32 = 0;
    
    if (id_source + 0 < convert_size) {
        x1 = v_input1[convert_start_offset + id_source + 0];
    }
    if (id_source + 1 < convert_size) {
        x2 = v_input1[convert_start_offset + id_source + 1];
    }
    if (id_source + 2 < convert_size) {
        x3 = v_input1[convert_start_offset + id_source +2];
    }
    if (id_source + 3 < convert_size) {
        x4 = v_input1[convert_start_offset + id_source + 3];
    }
   
    v_dest_u32[id_dest] = (x4 << 24) | (x3 << 16) | (x2 << 8) | x1;
}

#endif

#ifdef f32

@compute
@workgroup_size(64,1,1)
fn convert_f32_to_u8(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id_dest = global_id.x;
    let id_source = global_id.x * 4;
    if (id_source >= convert_size ){
        return;
    }

    var x1 : u32 = 0;
    var x2 : u32 = 0;
    var x3 : u32 = 0;
    var x4 : u32 = 0;
    

    if (id_source + 0 < convert_size) {
        x1 = u32(v_input1[convert_start_offset + id_source + 0]);
    }
    if (id_source + 1 < convert_size) {
        x2 = u32(v_input1[convert_start_offset + id_source + 1]);
    }
    if (id_source + 2 < convert_size) {
        x3 = u32(v_input1[convert_start_offset + id_source + 2]);
    }
    if (id_source + 3 < convert_size) {
        x4 = u32(v_input1[convert_start_offset + id_source + 3]);
    }

    v_dest_u32[id_dest] = (x4 << 24) | (x3 << 16) | (x2 << 8) | x1;
}


#ifdef f32
@compute
@workgroup_size(64,1,1)
fn convert_f32_to_f16(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x * 2;
    if (id >= convert_size ){
        return;
    }
    var x1 : u32 = 0;
    var x2 : u32 = 0;
    if (id + 0 < convert_size){
       x1 = float_to_half(v_input1[id]);
    }
    if (id + 1 < convert_size){
       x2 = float_to_half(v_input1[id + 1]);
    }
    v_dest_u32[global_id.x] = (x2 << 16) | (x1);
}

@compute
@workgroup_size(64,1,1)
fn convert_f16_to_f32(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x * 2;
    if (id >= convert_size){
        return;
    }
    let x = v_input1_u32[id / 2];
    let x1 = half_to_float(x & 0xFFFF);
    let x2 = half_to_float(x >> 16);
    v_dest[id] = x1;
    v_dest[id + 1] = x2;
}



#endif
