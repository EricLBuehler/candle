#include "util.pwgsl"

fn set_binary(operation : u32, id : u32, x : DTYPE, y : DTYPE){
    switch(operation){
        case 0u{
            v_dest[id] = y;
        }
        case 1u{ //add
            v_dest[id] = x + y;
        }
        case 2u{ //mult
            v_dest[id] = x * y;
        }
        case 3u{ //minus
            v_dest[id] = x - y;
        }
        case 4u{ //div
            v_dest[id] = x / y;
        }
        case 5u{ //max
            v_dest[id] = max(x, y);
        }
        case 6u{ //min
            v_dest[id] = min(x, y);
        }
#ifdef f32        
        case 7u{ //powf
            v_dest[id] = pow(x, y);
        }
#endif
        default{

        }
    }
}



override CONSTV_0 : u32 = 1u;
override CONSTV_1 : bool = true;
override CONSTV_2 : bool = true;

#define op_binary_operation         CONSTV_0

#define op_binary_input1_layout     0u


#define op_binary_contiguous_both_operation                 CONSTV_0
#define op_binary_contiguous_both_input1_length             op_meta[0]
#define op_binary_contiguous_both_is_input1_offset_zero     CONSTV_1
#define op_binary_contiguous_both_is_input2_offset_zero     CONSTV_2

#define op_binary_contiguous_both_input1_offset             select(op_binary_contiguous_both_is_input1_offset_zero, 0u, op_meta[1])
#define op_binary_contiguous_both_input2_offset             select(op_binary_contiguous_both_is_input2_offset_zero, 0u, op_meta[2])

@compute
@workgroup_size(64,1,1)
fn binary_buffer_from_buffer(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = global_id.x + global_id.y * 65535 * 64;

    let input2_layout = op_binary_input1_layout + get_size1();

    let pos1 = get_index1(op_binary_input1_layout, id);
    let pos2 = get_index2(input2_layout, id);
    
    if(pos1.is_valid){
        set_binary(op_binary_operation, id, v_input1[pos1.id], v_input2[pos2.id]);
    }
}

@compute
@workgroup_size(64,1,1)
fn binary_buffer_from_buffer_contiguous_both(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = (global_id.x + global_id.y * 65535 * 64);
    if (id >= op_binary_contiguous_both_input1_length){
        return;
    }
    set_binary(op_binary_contiguous_both_operation, id, v_input1[id + op_binary_contiguous_both_input1_offset], v_input2[id + op_binary_contiguous_both_input2_offset]);
}

@compute
@workgroup_size(64,1,1)
fn binary_buffer_inplace1_contiguous_both(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = (global_id.x + global_id.y * 65535 * 64);
    if (id >= op_binary_contiguous_both_input1_length){
        return;
    }
    let offset1 = op_binary_contiguous_both_input1_offset; //is only used so that the shader compiles if op_binary_contiguous_both_input1_offset is set
    set_binary(op_binary_contiguous_both_operation, id, v_dest[id], v_input1[id + op_binary_contiguous_both_input2_offset]);
}

@compute
@workgroup_size(64,1,1)
fn binary_buffer_inplace2_contiguous_both(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let id = (global_id.x + global_id.y * 65535 * 64);
    if (id >= op_binary_contiguous_both_input1_length){
        return;
    }
    let offset2 = op_binary_contiguous_both_input2_offset; //is only used so that the shader compiles if op_binary_contiguous_both_input2_offset is set
    set_binary(op_binary_contiguous_both_operation, id, v_input1[id + op_binary_contiguous_both_input1_offset], v_dest[id]);
}